void DrawManager::DrawPhaseLPVPrepare()
{
	if(lpvCascadeManager_->GetIsEnabled())
	{
		const static bool LPV_UPDATE_FREQ[3][6] = 
		{
			{ true, false, true, false, true, false },
			{ false, true, false, true, false, false },
			{ false, false, false, false, false, true },
		};

		RenderState& rs = renderState_;

		Math::MatrixA viewMat = rs.GetViewMatrix();
		Math::MatrixA projMat = rs.GetProjectionMatrix();

		EBONY_ASSERT(lpvCascadeManager_->GetNumOfCascades() <= 3);

		lpvCascadeManager_->UpdateSplitsForCascades(lpvCascadeNearPlane_, lpvCascadeFarPlane_, lpvCascadeExpSplit_);

		// Do interleaved updates only
		for(int i=0; i < lpvCascadeManager_->GetNumOfCascades(); i++)
		{
			lpvTimeDelta_[i] += rs.GetDeltaTime();

			if(!useInterleavedUpdates_ || LPV_UPDATE_FREQ[i][currentFrame_])
			{
				if(!GRC::IsSceneDrawing())
				{
					GRC::BeginScene();
				}

				drawDirectionalRSM(rsmManager_, lpvCascadeManager_->GetCascadeSplitNear(i), lpvCascadeManager_->GetCascadeSplitFar(i));

				// RenderState& rs = renderState_;

				lpvCascadeManager_->GetLPVManager(i)->SetLPVBoundsFromViewProj(viewMat, projMat, lpvCascadeManager_->GetCascadeSplitNear(i), lpvCascadeManager_->GetCascadeSplitFar(i));

				float frustumArea = (rsmManager_->GetFrustumBounds().radius * 2.0f) * (rsmManager_->GetFrustumBounds().radius * 2.0f);
				MatrixA invRSMProjMat = rsmManager_->GetProjMat().Inverse();

				Texture* pCloudShadowTex0 = (Texture*)rs.GetEnvParameter(EnvParameter::kProceduralCloudShadowTex0);
				Texture* pCloudShadowTex1 = (Texture*)rs.GetEnvParameter(EnvParameter::kProceduralCloudShadowTex1);
				const Matrix* pCloudShadowTransform0 = (const Matrix*)rs.GetEnvParameter(EnvParameter::kProceduralCloudShadowTransform0);
				const Matrix* pCloudShadowTransform1 = (const Matrix*)rs.GetEnvParameter(EnvParameter::kProceduralCloudShadowTransform1);
				const Vector* pCloudWindDelta = (const Vector*)rs.GetEnvParameter(EnvParameter::kProceduralCloudWindDelta);
				const float* pCloudBlend = (const float*)rs.GetEnvParameter(EnvParameter::kProceduralCloudBlend);

				lpvCascadeManager_->GetLPVManager(i)->Inject(frustumArea, invRSMProjMat, 
					rsmManager_->GetRSMBuffer()->GetDepthStencil(), rsmManager_->GetRSMBuffer()->GetColor(0), rsmManager_->GetRSMBuffer()->GetColor(1), rs.GetMainLightColor(),
					pCloudShadowTex0, pCloudShadowTex1, pCloudShadowTransform0, pCloudShadowTransform1, pCloudWindDelta, pCloudBlend);

				lpvCascadeManager_->GetLPVManager(i)->Propagate(lpvTimeDelta_[i]);

				lpvTimeDelta_[i] = 0.0f;
			}
		}

		// Update frame marker
		currentFrame_ = (currentFrame_ + 1) % 6;

		if(!GRC::IsSceneDrawing())
		{
			GRC::BeginScene();
		}
	}
}



if (!isDebugDrawing)
#endif
		{
			// Light the scene with cascades if not showing debug instead
			lpvCascadeManager->Relight(&rs, GetGBufferDepth(), GetGBuffer(1), GetGBuffer(2));
		}